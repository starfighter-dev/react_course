{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","console","log","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"sMAGMA,G,MAAe,CACjBC,OAAQ,CACJC,KAAM,iBACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,oBACNC,SAAU,eAyBHE,EAbO,SAACC,GACnB,IATeC,EAAKC,EASdC,GATSF,EASUD,EAAMC,KATXC,GASgB,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EACdD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIH,EAEFP,EAAaS,GAAhCP,EAFqB,EAErBA,KAAMC,EAFe,EAEfA,SAEd,OACI,sBAAKS,UAAS,yBAAoBH,GAAlC,UACI,mBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,6BAAKD,IACL,mBAAGU,UAAS,6BAAwBT,EAAxB,eC5BlBU,EAAU,SAACP,GACb,OACI,qBAAKM,UAAU,mBAAf,SACI,qBAAKA,UAAU,qBAAf,SACKN,EAAMQ,aAMvBD,EAAQE,aAAe,CACnBD,QAAS,cAGED,QCXTG,E,4MAEFC,MAAQ,CACJV,IAAK,KACLW,aAAc,I,kEAGG,IAAD,OAChBC,QAAQC,IAAI,uBACZC,OAAOC,UAAUC,YAAYC,oBACzB,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAAEnB,IAAKkB,EAASE,OAAOC,cACjD,SAAAC,GAAG,OAAI,EAAKH,SAAS,CAAER,aAAcW,EAAIf,e,2CAK7CK,QAAQC,IAAI,0B,sCAIZ,OAAKU,KAAKb,MAAMC,eAAiBY,KAAKb,MAAMV,IACjC,0CAAauB,KAAKb,MAAMC,iBAG7BY,KAAKb,MAAMC,cAAgBY,KAAKb,MAAMV,IACjC,cAAC,EAAD,CAAeA,IAAKuB,KAAKb,MAAMV,MAGnC,cAAC,EAAD,CAASO,QAAQ,Y,+BAMxB,OADAK,QAAQC,IAAI,YAER,qBAAKR,UAAU,aAAf,SACKkB,KAAKC,sB,GApCJC,IAAMC,WA0CxBC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,cAAc,Y","file":"static/js/main.ec1aa863.chunk.js","sourcesContent":["import './SeasonDisplay.css'\nimport React from 'react';\n\nconst seasonConfig = {\n    summer: {\n        text: \"Bit hot innit?\",\n        iconName: 'sun'\n    },\n    winter: {\n        text: \"Brr, it is chilly\",\n        iconName: 'snowflake'\n    }\n}\n\nconst getSeason = (lat, month) => {\n    if (month > 2 && month < 9) {\n        return lat > 0 ? 'summer' : 'winter';\n    } else {\n        return lat > 0 ? 'winter' : 'summer';\n    }\n}\n\nconst SeasonDisplay = (props) => {\n    const season = getSeason(props.lat, new Date().getMonth())\n    const { text, iconName } = seasonConfig[season];\n\n    return (\n        <div className={`season-display ${season}`}>\n            <i className={`icon-left massive ${iconName} icon`} />\n            <h1>{text}</h1>\n            <i className={`icon-right massive ${iconName} icon`} />\n        </div>\n    )\n};\n\nexport default SeasonDisplay;","import React from 'react'\n\nconst Spinner = (props) => {\n    return (\n        <div className=\"ui active dimmer\">\n            <div className=\"ui big text loader\">\n                {props.message}\n            </div>\n        </div>\n    )\n}\n\nSpinner.defaultProps = {\n    message: \"Loading...\"\n}\n\nexport default Spinner;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport SeasonDisplay from './SeasonDisplay'\nimport Spinner from './Spinner'\n\nclass App extends React.Component {\n\n    state = { \n        lat: null,\n        errorMessage: ''\n    }\n\n    componentDidMount() {\n        console.log('componentDidMount()')\n        window.navigator.geolocation.getCurrentPosition(\n            position => this.setState({ lat: position.coords.latitude }),\n            err => this.setState({ errorMessage: err.message })\n        )\n    }\n\n    componentDidUpdate() {\n        console.log('componentDidUpdate()')\n    }\n\n    renderContent() {\n        if ( this.state.errorMessage && !this.state.lat ) {\n            return <div>Error: {this.state.errorMessage}</div>\n        }\n\n        if ( !this.state.errorMessage && this.state.lat ) {\n            return <SeasonDisplay lat={this.state.lat}/>\n        }\n\n        return <Spinner message=\"boobs\"/>\n    }\n\n    // this must exist\n    render() {\n        console.log('render()')\n        return (\n            <div className=\"border red\">\n                {this.renderContent()}\n            </div>\n        )\n    }\n}\n\nReactDOM.render(\n    <App />,\n    document.querySelector('#root')\n)"],"sourceRoot":""}